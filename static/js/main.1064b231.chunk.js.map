{"version":3,"sources":["Deck.js","Player/Player.js","CardGame/CardGame.js","index.js"],"names":["Deck","this","cards","temp","i","length","card2Index","Math","floor","random","card","pop","hex","codePointAt","toString","split","rank","parseInt","suit","Player","playerNumber","playerHealth","playerDraw","Paper","elevation","sx","padding","Typography","variant","Grid","container","spacing","item","xs","color","fontSize","LinearProgress","value","height","borderRadius","marginTop","Box","direction","alignItems","justifyContent","width","border","marginBottom","marginLeft","marginRight","CardGame","props","player1Deck","player2Deck","shuffle","state","player1Draw","player2Draw","consecutiveTies","battleCount","player1Health","player2Health","gameOver","winner","setState","style","lineHeight","drawOne","renderCard","damageMultiplier","min","player1Damage","player2Damage","max","AppBar","position","Toolbar","flexGrow","Button","onClick","newGame","size","Container","fixed","textAlign","md","display","battle","React","Component","ReactDOM","render","StrictMode","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.1064b231.chunk.js","sourcesContent":["class Deck {\n  constructor() {\n    this.cards = [\n        '🂡', '🂱', '🃑', '🃁',\n        '🂢', '🂲', '🃒', '🃂',\n        '🂣', '🂳', '🃓', '🃃',\n        '🂤', '🂴', '🃔', '🃄', \n        '🂥', '🂵', '🃕', '🃅',\n        '🂦', '🂶', '🃖', '🃆',\n        '🂧', '🂷', '🃗', '🃇',\n        '🂨', '🂸', '🃘', '🃈',\n        '🂩', '🂹', '🃙', '🃉',\n        '🂪', '🂺', '🃚', '🃊',\n        '🂫', '🂻', '🃛', '🃋',\n        '🂭', '🂽', '🃝', '🃍',\n        '🂮', '🂾', '🃞', '🃎',\n      ];\n  }\n\n  shuffle() {\n    let temp;\n\n    // Fisher–Yates shuffle https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n    for (var i = this.cards.length - 1; i > 0; i--) {\n      const card2Index = Math.floor(Math.random() * (i+1));\n      temp = this.cards[card2Index];\n      this.cards[card2Index] = this.cards[i];\n      this.cards[i] = temp;\n    }\n  }\n\n  drawOne() {\n    const card = this.cards.pop();\n\n    if (card) {\n      // Card unicode values are in format U+1F0A1 with the last two bytes representing the suit and the rank\n      const hex = card.codePointAt(0).toString(16).split('');\n\n      // Values 1 to 14 representing ace through king\n      // Value 12 is for \"knight\" which is not used in our deck\n      const rank = parseInt(hex.pop(), 16); \n      \n      // 'a', 'b', 'c', 'd' representing spades, hearts, diamonds and clubs respectively\n      const suit = hex.pop(); \n\n      return { card, suit, rank };\n    }\n  }\n}\n\nexport default Deck;\n","import React from 'react';\nimport { Box, Typography, Paper, LinearProgress, Grid } from '@mui/material';\nimport FavoriteIcon from '@mui/icons-material/Favorite';\n\n\nexport default function Player({ playerNumber, playerHealth, playerDraw }) {\n  return (\n    <Paper elevation={3} sx={{ padding: '1em' }}>\n      <Typography variant=\"h6\">Player {playerNumber}</Typography>\n      <Grid container spacing={2}>\n        <Grid item xs={1}>\n          <FavoriteIcon sx={{ color: 'red' }} fontSize=\"small\"/>\n        </Grid>\n        <Grid item xs={11}>\n          <LinearProgress variant=\"determinate\" value={playerHealth} sx={{\n            height: 10,\n            borderRadius: 5,\n            marginTop: '0.4em',\n          }} />\n        </Grid>\n      </Grid>\n      <Box\n        direction=\"column\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n        sx={{\n          width: '13em',\n          height: '16em',\n          border: '0.25em solid lightGrey',\n          borderRadius: '0.3em',\n          marginTop: '2em',\n          marginBottom: '1em',\n          marginLeft: 'auto',\n          marginRight: 'auto',\n        }}\n      >\n        {playerDraw}\n      </Box>\n    </Paper>\n  );\n}\n","import React from 'react';\nimport { Container, Button, AppBar, Toolbar, Typography, Grid, Box, Paper } from '@mui/material';\nimport Deck from '../Deck';\nimport Player from '../Player/Player';\n\n\nclass CardGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.player1Deck = new Deck();\n    this.player2Deck = new Deck();\n    this.player1Deck.shuffle();\n    this.player2Deck.shuffle();\n    this.state = {\n      player1Draw: null,\n      player2Draw: null,\n      consecutiveTies: 0,\n      battleCount: 0,\n      player1Health: 100,\n      player2Health: 100,\n      gameOver: false,\n      winner: 0,\n    };\n  }\n\n  newGame() {\n    this.player1Deck = new Deck();\n    this.player2Deck = new Deck();\n    this.player1Deck.shuffle();\n    this.player2Deck.shuffle();\n\n    this.setState(() => ({\n      player1Draw: null,\n      player2Draw: null,\n      consecutiveTies: 0,\n      battleCount: 0,\n      player1Health: 100,\n      player2Health: 100,\n      gameOver: false,\n      winner: 0,\n    }));\n  }\n\n  renderCard(card) {\n    const color = (card.suit === 'b' || card.suit === 'c') ? 'red' : 'black';\n    const fontSize = '16em';\n    const lineHeight = '0.8em';\n    return <span style={{color, fontSize, lineHeight}}>{card.card}</span>\n  }\n\n  battle() {\n    const player1Draw = this.player1Deck.drawOne();\n    const player2Draw = this.player2Deck.drawOne();\n\n    // Tie\n    if (player1Draw.rank === player2Draw.rank) {\n      this.setState((state) => ({\n        ...state,\n        player1Draw: this.renderCard(player1Draw),\n        player2Draw: this.renderCard(player2Draw),\n        consecutiveTies: state.consecutiveTies + 1,\n        battleCount: state.battleCount + 1,\n        gameOver: state.battleCount === 51,\n      }));\n    }\n\n    // Do damage\n    else {\n      this.setState((state) => {\n        const damageMultiplier = Math.min((state.consecutiveTies + 1)*2, 6) * 2;\n        var gameOver = false;\n        var winner = 0;\n        var player1Damage = 0;\n        var player2Damage = 0;\n\n        // Ace trumps\n        if (player1Draw.rank === 1) {\n          player2Damage = (15 - player2Draw.rank) * damageMultiplier;\n        }\n\n        // Ace trumps\n        else if (player2Draw.rank === 1) {\n          player1Damage = (15 - player1Draw.rank) * damageMultiplier;\n        }\n\n        // Calulate damage\n        else {\n          player1Damage = Math.max(player2Draw.rank - player1Draw.rank, 0) * damageMultiplier;\n          player2Damage = Math.max(player1Draw.rank - player2Draw.rank, 0) * damageMultiplier;\n        }\n\n        // Player 1 wins\n        if (state.player2Health - player2Damage <= 0) {\n          gameOver = true;\n          winner = 1;\n        }\n\n        // Player 2 wins\n        if (state.player1Health - player1Damage <= 0) {\n          gameOver = true;\n          winner = 2;\n        }\n\n        // No more cards\n        if (state.battleCount === 51) {\n          gameOver = true;\n          winner = 0;\n        }\n\n        return {\n          ...state,\n          player1Draw: this.renderCard(player1Draw),\n          player2Draw: this.renderCard(player2Draw),\n          consecutiveTies: 0,\n          battleCount: state.battleCount + 1,\n          player1Health: state.player1Health - player1Damage,\n          player2Health: state.player2Health - player2Damage,\n          gameOver,\n          winner,\n        }\n      });\n    }\n  }\n\n  render() {\n    const { player1Draw, player2Draw, player1Health, player2Health, battleCount, gameOver, winner } = this.state;\n\n    return (\n      <div>\n        <AppBar position=\"static\" sx={{ marginBottom: '2em' }}>\n          <Toolbar>\n            <Typography variant=\"h5\" sx={{ flexGrow: 1 }}>Ace's High</Typography>\n            <Button onClick={() => this.newGame()} variant=\"outlined\" size=\"small\" color='inherit'>New Game</Button>\n          </Toolbar>\n        </AppBar>\n\n        <Container fixed>\n          <Typography variant=\"subtitle1\" sx={{ marginBottom: '2em' }}>\n            Defeat your opponent by winning the high card draw. Each win does damage to your opponent.\n            The damage is calculated by the difference in card values.\n            Ace is the high card. In the case of a tie, the damage multiplier increases for a maximum of 6x damage.\n          </Typography>\n\n          {gameOver ? (\n            <Paper elevation={3} sx={{ padding: '1em', textAlign: 'center' }}>\n              <Typography variant=\"h2\" sx={{ marginBottom: '1em', marginTop: '1em' }}>\n                { winner ? `Player ${winner} is victorious!` : `Stalemate!` }\n              </Typography>\n              <Button onClick={() => this.newGame()} variant=\"outlined\" size=\"large\">Play Again</Button>\n            </Paper>\n          ) : (\n            <Grid container spacing={2} sx={{ textAlign: 'center' }}>\n\n              <Grid item xs={12} md={5}>\n                <Player playerNumber='1' playerDraw={player1Draw} playerHealth={player1Health}/>\n              </Grid>\n\n              <Grid item xs={12} md={2} sx={{\n                display: 'flex',\n                alignItems: 'center',\n                justifyContent: 'center',\n                marginTop: '1em',\n                marginBottom: '1em',\n              }}>\n                <Box>\n                  <Button onClick={() => this.battle()} variant=\"contained\" size=\"large\">BATTLE</Button>\n                  <Typography variant=\"subtitle2\">Remaining: {52 - battleCount}</Typography>\n                </Box>\n              </Grid>\n\n              <Grid item xs={12} md={5}>\n                <Player playerNumber='2' playerDraw={player2Draw} playerHealth={player2Health}/>\n              </Grid>\n            </Grid>\n          )}\n\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default CardGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport CardGame from './CardGame/CardGame';\nimport CssBaseline from '@mui/material/CssBaseline';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <CardGame />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}